{"version":3,"sources":["logo.svg","components/Child.js","components/Demo.js","components/Parents.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Child","Component","state","a","handleButtonClick","console","log","setState","this","type","onClick","AddToDoList","props","titleOnChangeHandler","event","Title","target","value","statusOnChangeHandler","Status","onSubmitHandler","preventDefault","onAdd","id","Id","onCancelHandler","onCancel","lastID","className","onSubmit","submitHandler","htmlFor","name","onChange","ToDoList","todos","isAddFormDisplay","deleteToDo","todo","filteredItems","filter","x","onClickAddButton","onClickCancelButton","showAddItemForm","addToDo","length","editToDo","map","style","color","icon","library","add","faTrash","faEdit","faPlus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2f90dc1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nexport default class Child extends Component {\n    state = {\n        a:\"Hello\"\n    };\n\n    handleButtonClick = () => {\n        console.log(\"Inside Button Click\");\n        if(this.state.a == \"Hello\"){\n            this.setState(\n                {\n                    a:\"Bye\"\n                }\n            );    \n        } else {\n            this.setState(\n                {\n                    a:\"Hello\"\n                }\n            );    \n        }\n    }\n\n    render() {\n    return (\n      <div>\n          <h3>{this.state.a}</h3>\n          <button type=\"button\" onClick={this.handleButtonClick}>Click Me</button>\n      </div>\n    );\n    }\n}","import React, {Component} from \"react\";\n\nclass Demo extends Component {\n    render(){\n        return(\n            <div>\n                <h1>Hello World</h1>\n            </div>\n        );\n    }\n}\n\nexport default Demo;\n\n","import React, { Component } from \"react\";  \nimport Child from './Child';\n\nexport default class Parent extends Component {\n    render(){\n        return(\n            <div>\n                <h1>I'm parent component</h1>\n                <Child Title='This is props from Parent Component'></Child>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass AddToDoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            Id : props.lastID + 1,\n            Title : \"\",\n            Status : \"Pending\"\n        };\n    }\n\n    titleOnChangeHandler = (event) => {\n        this.setState({\n            Title : event.target.value                \n        });\n    }\n\n    statusOnChangeHandler = (event) => {\n        this.setState({\n            Status : event.target.value                \n        });\n    }\n\n    onSubmitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAdd(\n            {\n                id: this.state.Id,\n                Title: this.state.Title,\n                Status: this.state.Status\n            }\n        );\n        this.setState({\n            Id: this.state.Id + 1,\n            Title: \"\",\n            Status: \"Pending\"\n        });\n    }\n    onCancelHandler = (event) => {\n        event.preventDefault();\n        this.props.onCancel();\n    }\n\n    render(){\n        return(\n        <div>\n            <h3>Add Item</h3>\n            <form className=\"mb-3\" onSubmit={this.submitHandler}>\n                <label className=\"form-label\" htmlFor=\"title\">Title</label>\n                <input value={this.state.Title} className=\"form-control\" type=\"text\" name=\"title\" onChange = {this.titleOnChangeHandler}/>\n                <label className=\"form-label\" htmlFor=\"status\">Status</label>\n                <select className=\"form-control\" name=\"status\" value={this.state.Status} onChange={this.statusOnChangeHandler}>\n                    <option value=\"Pending\">Pending</option>\n                    <option value=\"Done\">Done</option>\n                </select>\n                <input className=\"btn btn-primary mt-2\" type=\"submit\" value=\"Add\" onClick= {this.onSubmitHandler}/>\n                <input className=\"btn btn-primary mt-2 ml-2\" type=\"button\" value=\"Cancel\" onClick= {this.onCancelHandler}/>\n            </form>\n        </div>\n        );\n    }\n}\n\n\nclass ToDoList extends Component {\n    state = {\n        todos: [\n            {id:1, Title:'Push your code to github', Status:'Done'},\n            {id:2, Title:'Email to your manager', Status:'Pending'},\n        ],\n        isAddFormDisplay: false\n    };\n    deleteToDo = (todo) => {\n        const filteredItems = this.state.todos.filter(x => x.id !== todo.id);\n    \n        this.setState({\n            todos: filteredItems      \n        });\n    }\n\n    onClickAddButton = () => {\n        this.setState({\n            isAddFormDisplay: true\n        });   \n    }\n\n    onClickCancelButton = () => {\n        this.setState({\n            isAddFormDisplay: false\n        });   \n    }\n    \n    showAddItemForm = () => {\n        if(this.state.isAddFormDisplay){\n            return(\n                <div>\n                    <AddToDoList onCancel={this.onClickCancelButton} onAdd={this.addToDo} lastID={this.state.todos.length}></AddToDoList>\n                </div>\n            );    \n        } else {\n            return(\n                <div>\n                    <button className=\"btn btn-primary\" onClick={this.onClickAddButton}>Add item</button>\n                </div>\n            );    \n        }\n    }\n\n    editToDo = (x) => {\n        this.setState(\n            state => ({\n                todos: state.todos.map(todo => {\n                    if(todo.id === x.id){\n                        return {\n                            ...todo, \n                            Status: todo.Status === \"Done\" ? \"Pending\": \"Done\",\n                        };\n                    } else {\n                        return todo;\n                    }\n                })\n            })\n        );\n    }\n\n    addToDo = (todo) => {\n        this.setState({\n            todos: [...this.state.todos, todo]\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"Container\">\n                <h1>To do list</h1>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Id</th>\n                            <th>Title</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.todos.map(x => {\n                            return(\n                                <tr key={x.id}>\n                                    <td>{x.id}</td>\n                                    <td>{x.Title}</td>\n                                    <td style={{color: x.Status === \"Done\" ? \"green\":\"red\"}}>{x.Status}</td>\n                                    <td>\n                                        <button className=\"btn btn-primary mr-3\" onClick={()=>this.deleteToDo(x)}><span><FontAwesomeIcon icon=\"trash\"></FontAwesomeIcon></span></button>\n                                        <button className=\"btn btn-primary\" onClick={()=>this.editToDo(x)}><span><FontAwesomeIcon icon=\"edit\"></FontAwesomeIcon></span></button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                        <tr>\n\n                        </tr>\n                    </tbody>\n                </table>\n                {this.showAddItemForm()}                \n            </div>\n        );\n    }\n}\n\nexport {ToDoList, AddToDoList};","import logo from './logo.svg';\nimport './App.css';\nimport Demo from './components/Demo';\nimport Demo1 from './components/Demo1';\nimport Parent from './components/Parents';\nimport {ToDoList, AddToDoList} from './components/ToDoList'\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faTrash, faPlus, faEdit  } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash,faEdit,faPlus);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList></ToDoList>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}